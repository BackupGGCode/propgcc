@c Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,
@c 2006, 2007, 2008, 2009, 2012  Free Software Foundation, Inc.
@c This is part of the GAS manual.
@c For copying conditions, see the file as.texinfo.

@ifset GENERIC
@page
@node Propeller-Dependent
@chapter Propeller Dependent Features
@end ifset

@ifclear GENERIC
@node Machine Dependencies
@chapter Propeller Dependent Features
@end ifclear

@cindex Propeller support
@menu
* Propeller Options::              Options
* Propeller Syntax::               Syntax
* Propeller Floating Point::       Floating Point
* Propeller Directives::           Propeller Machine Directives
* Propeller Opcodes::              Opcodes
* Propeller Mapping Symbols::      Mapping Symbols
* Propeller Unwinding Tutorial::   Unwinding
@end menu

@node Propeller Options
@section Options
@cindex Propeller options (none)
@cindex options for Propeller (none)

@table @code

@cindex @code{-lmm} command line option, Propeller
@item -lmm
This option indicates that code is to be compiled for LMM mode. This
enables several pseudo-opcodes for branching.

@cindex @code{-cmm} compressed code, Propeller
@item -cmm
This option indicates that code is to be compressed by
default. Normally the compression state is off by default. In either
case the default may be overridden by explicit @code{.compress}
directives.

Compressed mode code cannot be directly executed by the processor, but
must be interpreted by the CMM mode kernel. The compression uses a
number of techniques to reduce the code size by about half.

@end table


@node Propeller Syntax
@section Syntax
@menu
* Propeller-Instruction-Set::      Instruction Set
* Propeller-Chars::                Special Characters
* Propeller-Regs::                 Register Names
* Propeller-Relocations::	     Relocations
@end menu

@node Propeller-Instruction-Set
@subsection Instruction Set Syntax
As far as possible, the GAS syntax for the Propeller family duplicates
the syntax of the Parallax assembler.

@table @code

@item
Conditional execution prefixes appear at the beginning of the line,
but after one or more blanks.

@item
Effect affixes always appear at the end of the instruction.

@item
All hardware-defined instructions of the Propeller processor are
always available.  If LMM mode is enabled, certain pseudo-instructions
are available.  See below for details. In compressed mode
the LMM pseudo-instructions are available, as well as a few additional ones.

@end table

@node Propeller-Chars
@subsection Special Characters

@cindex line comment character, Propeller
@cindex Propeller line comment character
The presence of a @samp{'} on a line indicates the start of a comment
that extends to the end of the current line.  If a @samp{#} appears as
the first character of a line, the whole line is treated as a comment.

@cindex line separator, Propeller
@cindex statement separator, Propeller
@cindex Propeller line separator
The @samp{;} character can be used instead of a newline to separate
statements.

@cindex immediate character, Propeller
@cindex Propeller immediate character
The character @samp{#} is used to indicate immediate operands.

@cindex identifiers, Propeller
@cindex Propeller identifiers
*TODO* Explain about symbols.

@node Propeller-Regs
@subsection Register Names

@cindex Propeller register names
@cindex register names, Propeller
*TODO* Explain about Propeller register naming, and the predefined names.

@node Propeller Floating Point
@section Floating Point

@cindex floating point, Propeller (@sc{ieee})
@cindex Propeller floating point (@sc{ieee})
The Propeller family uses @sc{ieee} floating-point numbers. 32 and 64
bit registers are available.

@node Propeller-Relocations
@subsection Propeller relocation generation

@cindex data relocations, Propeller
@cindex Propeller data relocations
Specific data relocations can be generated by putting the relocation name
in parentheses after the symbol name.  For example:

FIXME This doesn't actually work.  Would it be convenient?

@smallexample
        .word foo(TARGET1)
@end smallexample

This will generate an @samp{R_ARM_TARGET1} relocation against the symbol
@var{foo}.
The following relocations are supported:
@code{GOT},
@code{GOTOFF},
@code{TARGET1},
@code{TARGET2},
@code{SBREL},
@code{TLSGD},
@code{TLSLDM},
@code{TLSLDO},
@code{GOTTPOFF},
@code{GOT_PREL}
and
@code{TPOFF}.

@node Propeller Directives
@section Propeller Machine Directives

@cindex machine directives, Propeller
@cindex Propeller machine directives
@table @code

@c AAAAAAAAAAAAAAAAAAAAAAAAA
@c BBBBBBBBBBBBBBBBBBBBBBBBBB
@c CCCCCCCCCCCCCCCCCCCCCCCCCC

@cindex @code{.cog_ram} directive, Propeller
@item .cog_ram
Marks symbols to indicate that their values should be treated as word
addresses, not byte addresses, by the linker.  This is intended to
duplicate the standard behavior of the PASM assembler.

@c DDDDDDDDDDDDDDDDDDDDDDDDDD
@c EEEEEEEEEEEEEEEEEEEEEEEEEE
@c FFFFFFFFFFFFFFFFFFFFFFFFFF

@anchor{propeller_fit}
@cindex @code{.fit} directive, Propeller
@item .fit @var{exp}
For compatibility with PASM.  Has no effect.

@c GGGGGGGGGGGGGGGGGGGGGGGGGG
@c HHHHHHHHHHHHHHHHHHHHHHHHHH

@cindex @code{.hub_ram} directive, Propeller
@item .hubram
Ends a @code{cog_ram} section.  Terminates symbol marking.

@c IIIIIIIIIIIIIIIIIIIIIIIIII
@c JJJJJJJJJJJJJJJJJJJJJJJJJJ
@c KKKKKKKKKKKKKKKKKKKKKKKKKK
@c LLLLLLLLLLLLLLLLLLLLLLLLLL
@c MMMMMMMMMMMMMMMMMMMMMMMMMM
@c NNNNNNNNNNNNNNNNNNNNNNNNNN
@c OOOOOOOOOOOOOOOOOOOOOOOOOO
@c PPPPPPPPPPPPPPPPPPPPPPPPPP
@c QQQQQQQQQQQQQQQQQQQQQQQQQQ
@c RRRRRRRRRRRRRRRRRRRRRRRRRR

@cindex @code{.res} directive, Propeller
@item .res
Reserves 4 bytes at the current address. This actually causes 4 bytes
of zero to be generated at present, although in the future this may
change to the ``proper'' behavior of simply advancing the location
counter by 4.

@c SSSSSSSSSSSSSSSSSSSSSSSSSS
@c TTTTTTTTTTTTTTTTTTTTTTTTTT
@c UUUUUUUUUUUUUUUUUUUUUUUUUU
@c VVVVVVVVVVVVVVVVVVVVVVVVVV
@c WWWWWWWWWWWWWWWWWWWWWWWWWW
@c XXXXXXXXXXXXXXXXXXXXXXXXXX
@c YYYYYYYYYYYYYYYYYYYYYYYYYY
@c ZZZZZZZZZZZZZZZZZZZZZZZZZZ

@end table

@node Propeller Opcodes
@section Opcodes

@cindex Propeller opcodes
@cindex opcodes for Propeller
@code{@value{AS}} implements all the standard Propeller opcodes.  It
also implements several pseudo opcodes, including several synthetic
instructions for LMM mode.

@table @code

@cindex @code{BRL <label>} pseudo op, Propeller
@item BRL
@smallexample
  brl target
@end smallexample

This pseudo op simulates a long PC-relative branch in LMM mode.

@cindex @code{BRS <label>} pseudo op, Propeller
@item BRS
@smallexample
  brs target
@end smallexample

This pseudo op simulates a PC-relative branch in LMM mode.

@cindex @code{LDI reg,<exp>} pseudo op, Propeller
@item LDI
@smallexample
  ldi <register> , <expression>
@end smallexample

@code{LDI} expands into a move from the next address and a constant
that decodes as a NOP.

@cindex @code{XMMIO <label>, reg, reg} pseudo op, Propeller
@item XMMIO
@smallexample
  xmmio rdbyte, <register>, <register>
@end smallexample

FIXME What does this do?

@end table

For information on the Propeller instruction set, see @cite{Propeller
reference manual}, Parallax, Inc.
